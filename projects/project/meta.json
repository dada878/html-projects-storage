{
  "projectName": "project",
  "authorName": "ray",
  "htmlContent": "<!DOCTYPE html>\n<html lang=\"zh-Hant\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>番茄鐘</title>\n  <style>\n    /* === Reset & Base === */\n    * { margin: 0; padding: 0; box-sizing: border-box; font-family: 'Segoe UI', Roboto, Helvetica, Arial, sans-serif; }\n    body {\n      background: linear-gradient(135deg, #1e1e1e, #121212);\n      color: #fff;\n      display: flex; flex-direction: column; align-items: center; justify-content: flex-start;\n      min-height: 100vh; padding: 2rem 1rem;\n    }\n    h1 { font-size: 1.5rem; margin-bottom: 1rem; }\n\n    /* === Circular Timer === */\n    .timer-container { position: relative; width: 220px; height: 220px; margin-bottom: 1.5rem; }\n    svg { transform: rotate(-90deg); }\n    .circle-bg { fill: none; stroke: #333; stroke-width: 12; }\n    .circle { fill: none; stroke-width: 12; stroke-linecap: round; transition: stroke 0.3s; }\n    .time-display { position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); font-size: 2rem; font-weight: bold; }\n\n    /* === Controls === */\n    .controls { display: flex; flex-wrap: wrap; gap: 0.75rem; justify-content: center; margin-bottom: 1rem; }\n    button {\n      padding: 0.6rem 1rem; border: none; border-radius: 8px; cursor: pointer; font-size: 1rem;\n      background-color: #2a2a2a; color: #fff; transition: all 0.2s ease;\n    }\n    button:hover { background-color: #3a3a3a; transform: scale(1.05); }\n\n    /* === Completed Pomodoros === */\n    .completed { margin-top: 1rem; font-size: 0.95rem; color: #aaa; }\n\n    /* === Dialog === */\n    dialog { border: none; border-radius: 12px; padding: 1.5rem; background-color: #1e1e1e; color: #fff; max-width: 300px; width: 100%; }\n    dialog::backdrop { background: rgba(0, 0, 0, 0.6); }\n    .dialog-content label { display: block; margin: 0.5rem 0 0.2rem; }\n    .dialog-content input { width: 100%; padding: 0.4rem; margin-bottom: 0.5rem; border-radius: 6px; border: none; outline: none; font-size: 1rem; background-color: #333; color: #fff; }\n    .dialog-actions { display: flex; justify-content: flex-end; gap: 0.5rem; margin-top: 0.5rem; }\n\n    /* === Notification Tip === */\n    #notif-tip {\n      display: none;\n      background-color: #333;\n      padding: 1rem;\n      border-radius: 10px;\n      margin-top: 1rem;\n      font-size: 0.9rem;\n      max-width: 320px;\n      text-align: left;\n      border: 1px solid #555;\n    }\n    #notif-tip.show { display: block; animation: fadeIn 0.3s ease-in-out; }\n    @keyframes fadeIn {\n      from { opacity: 0; transform: translateY(-5px); }\n      to { opacity: 1; transform: translateY(0); }\n    }\n  </style>\n</head>\n<body>\n  <h1>番茄鐘</h1>\n\n  <!-- Timer -->\n  <div class=\"timer-container\">\n    <svg width=\"220\" height=\"220\">\n      <circle class=\"circle-bg\" cx=\"110\" cy=\"110\" r=\"100\"></circle>\n      <circle class=\"circle\" cx=\"110\" cy=\"110\" r=\"100\"></circle>\n    </svg>\n    <div class=\"time-display\">25:00</div>\n  </div>\n\n  <!-- Controls -->\n  <div class=\"controls\">\n    <button id=\"start-pause\">開始</button>\n    <button id=\"reset\">重置</button>\n    <button id=\"mode\">切換模式</button>\n    <button id=\"settings\">設定</button>\n    <button id=\"enable-notifications\">啟用通知</button>\n  </div>\n\n  <!-- Completed -->\n  <div class=\"completed\">完成的番茄數：<span id=\"completed-count\">0</span></div>\n\n  <!-- Notification Tip -->\n  <div id=\"notif-tip\"></div>\n\n  <!-- Dialog -->\n  <dialog id=\"settings-dialog\">\n    <div class=\"dialog-content\">\n      <label for=\"work-time\">工作時間 (分鐘)</label>\n      <input type=\"number\" id=\"work-time\" value=\"25\" min=\"1\">\n      <label for=\"break-time\">休息時間 (分鐘)</label>\n      <input type=\"number\" id=\"break-time\" value=\"5\" min=\"1\">\n    </div>\n    <div class=\"dialog-actions\">\n      <button id=\"cancel-settings\">取消</button>\n      <button id=\"save-settings\">儲存</button>\n    </div>\n  </dialog>\n\n  <!-- Sound -->\n  <audio id=\"alarm-sound\" src=\"https://actions.google.com/sounds/v1/alarms/alarm_clock.ogg\" preload=\"auto\"></audio>\n\n  <script>\n    const startPauseBtn = document.getElementById(\"start-pause\");\n    const resetBtn = document.getElementById(\"reset\");\n    const modeBtn = document.getElementById(\"mode\");\n    const settingsBtn = document.getElementById(\"settings\");\n    const enableNotifBtn = document.getElementById(\"enable-notifications\");\n    const notifTip = document.getElementById(\"notif-tip\");\n    const settingsDialog = document.getElementById(\"settings-dialog\");\n    const cancelSettingsBtn = document.getElementById(\"cancel-settings\");\n    const saveSettingsBtn = document.getElementById(\"save-settings\");\n    const workInput = document.getElementById(\"work-time\");\n    const breakInput = document.getElementById(\"break-time\");\n    const timeDisplay = document.querySelector(\".time-display\");\n    const circle = document.querySelector(\".circle\");\n    const completedCountEl = document.getElementById(\"completed-count\");\n    const alarmSound = document.getElementById(\"alarm-sound\");\n\n    let workDuration = 25 * 60;\n    let breakDuration = 5 * 60;\n    let timeLeft = workDuration;\n    let isRunning = false;\n    let isWorkMode = true;\n    let timer;\n    let completedCount = 0;\n\n    const radius = 100;\n    const circumference = 2 * Math.PI * radius;\n    circle.style.strokeDasharray = circumference;\n    circle.style.strokeDashoffset = 0;\n\n    function formatTime(totalSec) {\n      const minutes = Math.floor(Math.max(totalSec, 0) / 60);\n      const seconds = Math.max(totalSec, 0) % 60;\n      return `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;\n    }\n    function computeProgress(left, duration) {\n      if (duration <= 0) return 0;\n      const p = left / duration;\n      return Math.max(0, Math.min(1, p));\n    }\n\n    function canUseNotifications() { return typeof Notification !== 'undefined'; }\n    function getBrowserName() {\n      const ua = navigator.userAgent;\n      if (/chrome|chromium|crios/i.test(ua) && !/edg/i.test(ua)) return \"Chrome\";\n      if (/edg/i.test(ua)) return \"Edge\";\n      if (/firefox|fxios/i.test(ua)) return \"Firefox\";\n      if (/safari/i.test(ua) && !/chrome|chromium|crios/i.test(ua)) return \"Safari\";\n      return \"Unknown\";\n    }\n\n    function updateNotifTip() {\n      const browser = getBrowserName();\n      let tip = \"通知功能目前被封鎖。請至瀏覽器設定中允許通知：<br>\";\n      switch (browser) {\n        case \"Chrome\":\n          tip += \"• Chrome：設定 → 隱私權與安全性 → 網站設定 → 通知\";\n          break;\n        case \"Edge\":\n          tip += \"• Edge：設定 → Cookie 和網站權限 → 通知\";\n          break;\n        case \"Firefox\":\n          tip += \"• Firefox：設定 → 隱私與安全性 → 權限 → 通知\";\n          break;\n        case \"Safari\":\n          tip += \"• Safari：系統偏好設定 → 通知 → 在此網站允許通知\";\n          break;\n        default:\n          tip += \"請查看您的瀏覽器通知設定。\";\n      }\n      notifTip.innerHTML = tip;\n      notifTip.classList.add('show');\n    }\n\n    async function tryEnableNotifications() {\n      if (!canUseNotifications()) {\n        alert('此瀏覽器不支援通知功能');\n        return false;\n      }\n      if (Notification.permission === 'granted') {\n        alert('通知已啟用');\n        notifTip.classList.remove('show');\n        return true;\n      }\n      if (Notification.permission === 'denied') {\n        updateNotifTip();\n        return false;\n      }\n      try {\n        const res = await Notification.requestPermission();\n        if (res === 'granted') {\n          alert('通知已啟用');\n          notifTip.classList.remove('show');\n          return true;\n        } else {\n          updateNotifTip();\n          return false;\n        }\n      } catch (e) {\n        console.warn('Notification permission request failed:', e);\n        updateNotifTip();\n        return false;\n      }\n    }\n\n    function notifyUser(message) {\n      if (canUseNotifications() && Notification.permission === 'granted') {\n        try { new Notification(message); } catch (e) { console.warn('Notification failed:', e); }\n      }\n    }\n\n    function updateDisplay() {\n      timeDisplay.textContent = formatTime(timeLeft);\n      document.title = `${timeDisplay.textContent} - 番茄鐘`;\n\n      const duration = isWorkMode ? workDuration : breakDuration;\n      const progress = computeProgress(timeLeft, duration);\n      circle.style.strokeDashoffset = circumference * (1 - progress);\n      circle.style.stroke = isWorkMode ? '#f97316' : '#3b82f6';\n    }\n\n    function onTick() {\n      timeLeft--;\n      if (timeLeft <= 0) {\n        clearInterval(timer);\n        alarmSound.currentTime = 0;\n        alarmSound.play().catch(() => {});\n\n        if (isWorkMode) {\n          completedCount++;\n          completedCountEl.textContent = completedCount;\n          notifyUser('工作完成！休息一下吧 🍵');\n        } else {\n          notifyUser('休息結束！回到工作 🍅');\n        }\n        isWorkMode = !isWorkMode;\n        timeLeft = isWorkMode ? workDuration : breakDuration;\n        updateDisplay();\n        startTimer();\n        return;\n      }\n      updateDisplay();\n    }\n\n    function startTimer() {\n      clearInterval(timer);\n      timer = setInterval(onTick, 1000);\n      isRunning = true;\n      startPauseBtn.textContent = '暫停';\n    }\n\n    function pauseTimer() {\n      clearInterval(timer);\n      isRunning = false;\n      startPauseBtn.textContent = '開始';\n    }\n\n    function startPauseHandler() {\n      if (isRunning) {\n        pauseTimer();\n      } else {\n        startTimer();\n      }\n    }\n\n    function resetTimer() {\n      clearInterval(timer);\n      isRunning = false;\n      timeLeft = isWorkMode ? workDuration : breakDuration;\n      startPauseBtn.textContent = '開始';\n      updateDisplay();\n    }\n\n    function toggleMode() {\n      isWorkMode = !isWorkMode;\n      timeLeft = isWorkMode ? workDuration : breakDuration;\n      resetTimer();\n    }\n\n    settingsBtn.addEventListener('click', () => settingsDialog.showModal());\n    cancelSettingsBtn.addEventListener('click', () => settingsDialog.close());\n\n    saveSettingsBtn.addEventListener('click', () => {\n      const w = Number(workInput.value);\n      const b = Number(breakInput.value);\n      if (!Number.isFinite(w) || !Number.isFinite(b) || w <= 0 || b <= 0) {\n        alert('請輸入有效的分鐘數（必須大於 0）。');\n        return;\n      }\n      workDuration = w * 60; breakDuration = b * 60;\n      timeLeft = isWorkMode ? workDuration : breakDuration;\n      settingsDialog.close();\n      resetTimer();\n    });\n\n    enableNotifBtn.addEventListener('click', tryEnableNotifications);\n    startPauseBtn.addEventListener('click', startPauseHandler);\n    resetBtn.addEventListener('click', resetTimer);\n    modeBtn.addEventListener('click', toggleMode);\n\n    updateDisplay();\n  </script>\n</body>\n</html>\n",
  "isPublic": true,
  "title": "project",
  "description": "",
  "imageUrl": "",
  "createdAt": "2025-08-27T15:06:11.814Z"
}