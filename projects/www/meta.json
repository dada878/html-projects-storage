{
  "projectName": "www",
  "authorName": "Anonymous",
  "htmlContent": "<!DOCTYPE html>\n<html lang=\"zh-Hant\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <title>番茄鐘｜Pomodoro</title>\n  <meta name=\"description\" content=\"簡潔、現代、單檔版番茄鐘。支援短/長休息、自動下一段、通知與音效、統計、快捷鍵。\" />\n  <style>\n    :root {\n      --card-bg: rgba(255,255,255,0.7);\n      --card-border: rgba(255,255,255,0.5);\n      --text: #0f172a; /* slate-900 */\n      --muted: #475569; /* slate-600 */\n      --btn: #111827; /* gray-900 */\n      --btn-text: #ffffff;\n      --ring-bg: rgba(255,255,255,0.55);\n      --shadow: 0 10px 30px rgba(0,0,0,.12);\n    }\n    @media (prefers-color-scheme: dark) {\n      :root {\n        --card-bg: rgba(17,24,39,0.55);\n        --card-border: rgba(255,255,255,0.08);\n        --text: #e5e7eb;\n        --muted: #94a3b8;\n        --btn: #e5e7eb;\n        --btn-text: #111827;\n        --ring-bg: rgba(255,255,255,0.15);\n        --shadow: 0 10px 30px rgba(0,0,0,.35);\n      }\n    }\n    /* 主題色依模式切換 */\n    body.work { --grad1: #ffecd2; --grad2: #fcb69f; --accent: #f97316; --accent-weak:#fdba74; }\n    body.break { --grad1: #d4fc79; --grad2: #96e6a1; --accent: #10b981; --accent-weak:#6ee7b7; }\n    body.long  { --grad1: #cfd9df; --grad2: #e2ebf0; --accent: #6366f1; --accent-weak:#a5b4fc; }\n\n    * { box-sizing: border-box; }\n    html, body { height: 100%; }\n    body {\n      margin: 0; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Noto Sans TC', PingFangTC, 'Heiti TC', 'Microsoft JhengHei', sans-serif;\n      background: linear-gradient(135deg, var(--grad1), var(--grad2));\n      color: var(--text);\n      display: grid; place-items: center;\n      transition: background 600ms ease;\n    }\n\n    .app {\n      width: min(920px, 92vw);\n      margin: 28px auto; padding: 28px;\n      background: var(--card-bg);\n      border: 1px solid var(--card-border);\n      border-radius: 24px;\n      box-shadow: var(--shadow);\n      backdrop-filter: blur(10px);\n    }\n\n    header { display:flex; align-items:center; justify-content:space-between; gap:12px; }\n    header h1 { font-size: clamp(20px, 2.4vw, 28px); margin:0; letter-spacing:.5px; }\n    header .sub { color: var(--muted); font-size: 13px; }\n\n    .grid { display:grid; grid-template-columns: 1fr 480px; gap: 28px; }\n    @media (max-width: 860px) { .grid { grid-template-columns: 1fr; } }\n\n    /* 圓形進度 */\n    .dial {\n      position: relative; aspect-ratio: 1/1; width: 100%; max-width: 480px; margin-inline: auto;\n      display:grid; place-items:center;\n    }\n    .dial svg { position:absolute; inset:0; }\n    .dial .bg { stroke: var(--ring-bg); }\n    .dial .fg { stroke: var(--accent); transition: stroke-dashoffset .3s linear, stroke .3s ease; filter: drop-shadow(0 6px 10px rgba(0,0,0,.12)); }\n    .dial .center { position:relative; text-align:center; }\n    .time { font-size: clamp(40px, 7vw, 72px); font-weight: 700; letter-spacing: 1px; }\n    .mode-pill { display:inline-block; margin-top:6px; padding:6px 12px; border-radius: 999px; font-size: 12px; background: var(--accent-weak); color:#111827; }\n\n    .controls { display:flex; flex-wrap:wrap; gap:10px; justify-content:center; margin-top:18px; }\n    button {\n      appearance: none; border: 1px solid transparent; background: var(--btn); color: var(--btn-text);\n      padding: 10px 16px; border-radius: 14px; font-weight: 600; letter-spacing:.2px; cursor: pointer; transition: transform .06s ease, opacity .2s ease, background .2s ease;\n    }\n    button:hover { transform: translateY(-1px); }\n    button:active { transform: translateY(0); opacity:.95; }\n    .btn-ghost { background: transparent; color: var(--text); border-color: var(--card-border); }\n    .btn-accent { background: var(--accent); color: #111827; }\n\n    .modes { display:flex; gap:10px; flex-wrap:wrap; }\n    .modes button { background: transparent; color: var(--text); border:1px solid var(--card-border); }\n    .modes button.active { background: var(--accent); color:#111827; border-color: transparent; }\n\n    .stats { display:flex; flex-wrap:wrap; gap: 14px; font-size: 13px; color: var(--muted); }\n    .stat { display:flex; gap:6px; align-items:center; }\n\n    details.settings { margin-top: 8px; border-top: 1px dashed var(--card-border); padding-top: 16px; }\n    details.settings > summary { cursor: pointer; user-select:none; color: var(--muted); margin-bottom: 10px; }\n    .settings-grid { display:grid; grid-template-columns: repeat(2, minmax(0,1fr)); gap:16px; }\n    @media (max-width: 640px) { .settings-grid { grid-template-columns: 1fr; } }\n    .field { display:flex; flex-direction:column; gap:6px; }\n    .field label { font-size: 12px; color: var(--muted); }\n    .field input[type=\"number\"] { padding:10px 12px; border-radius: 12px; border:1px solid var(--card-border); background: transparent; color: var(--text); }\n    .row { display:flex; gap:10px; align-items:center; flex-wrap:wrap; }\n\n    footer { margin-top: 14px; color: var(--muted); font-size: 12px; text-align:center; }\n    kbd { background: rgba(0,0,0,.12); border-radius:6px; padding: 2px 6px; font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace; font-size: 11px; }\n  </style>\n</head>\n<body class=\"work\">\n  <div class=\"app\">\n    <header>\n      <div>\n        <h1>番茄鐘</h1>\n        <div class=\"sub\">工作 25 分鐘 · 短休 5 分鐘 · 長休 15 分鐘（預設）</div>\n      </div>\n      <div class=\"stats\">\n        <div class=\"stat\">今日完成 <strong id=\"statToday\">0</strong></div>\n        <div class=\"stat\">累計完成 <strong id=\"statTotal\">0</strong></div>\n      </div>\n    </header>\n\n    <div class=\"grid\">\n      <section>\n        <div class=\"dial\" aria-label=\"倒數計時\">\n          <svg viewBox=\"0 0 220 220\" xmlns=\"http://www.w3.org/2000/svg\" aria-hidden=\"true\">\n            <!-- 外圓半徑 r=100, 邊距 10 -->\n            <circle class=\"bg\" cx=\"110\" cy=\"110\" r=\"100\" fill=\"none\" stroke-width=\"16\" stroke-linecap=\"round\" />\n            <circle class=\"fg\" cx=\"110\" cy=\"110\" r=\"100\" fill=\"none\" stroke-width=\"16\" stroke-linecap=\"round\"\n                    stroke-dasharray=\"628\" stroke-dashoffset=\"0\" transform=\"rotate(-90 110 110)\" />\n          </svg>\n          <div class=\"center\">\n            <div class=\"time\" id=\"time\">25:00</div>\n            <div class=\"mode-pill\" id=\"modePill\">工作中</div>\n            <div class=\"controls\" role=\"group\" aria-label=\"計時控制\">\n              <button id=\"btnStart\" class=\"btn-accent\">開始</button>\n              <button id=\"btnPause\" class=\"btn-ghost\" disabled>暫停</button>\n              <button id=\"btnReset\" class=\"btn-ghost\">重置</button>\n              <button id=\"btnSkip\" class=\"btn-ghost\" title=\"跳到下一段\">跳過</button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <section>\n        <div class=\"row\" style=\"justify-content:space-between; align-items: center;\">\n          <div class=\"modes\" role=\"tablist\" aria-label=\"模式\">\n            <button role=\"tab\" data-mode=\"work\" class=\"active\">工作</button>\n            <button role=\"tab\" data-mode=\"break\">短休息</button>\n            <button role=\"tab\" data-mode=\"long\">長休息</button>\n          </div>\n        </div>\n\n        <details class=\"settings\">\n          <summary>設定</summary>\n          <form id=\"settingsForm\">\n            <div class=\"settings-grid\">\n              <div class=\"field\"><label for=\"workM\">工作（分鐘）</label><input id=\"workM\" type=\"number\" min=\"1\" max=\"180\" value=\"25\" /></div>\n              <div class=\"field\"><label for=\"shortM\">短休息（分鐘）</label><input id=\"shortM\" type=\"number\" min=\"1\" max=\"60\" value=\"5\" /></div>\n              <div class=\"field\"><label for=\"longM\">長休息（分鐘）</label><input id=\"longM\" type=\"number\" min=\"1\" max=\"120\" value=\"15\" /></div>\n              <div class=\"field\"><label for=\"longEvery\">每幾顆番茄進入長休息</label><input id=\"longEvery\" type=\"number\" min=\"1\" max=\"12\" value=\"4\" /></div>\n              <div class=\"field\"><label><input id=\"autoStart\" type=\"checkbox\" checked /> 工作段結束後自動開始休息</label></div>\n            </div>\n            <div class=\"row\" style=\"margin-top:12px;\">\n              <button type=\"submit\" class=\"btn-accent\">儲存設定</button>\n              <button type=\"button\" id=\"btnResetStats\" class=\"btn-ghost\">清除統計</button>\n            </div>\n          </form>\n        </details>\n\n        <footer style=\"margin-top:20px; text-align:left;\">\n          快捷鍵：<kbd>Space</kbd> 開始/暫停、<kbd>R</kbd> 重置、<kbd>N</kbd> 跳過、<kbd>1</kbd>/<kbd>2</kbd>/<kbd>3</kbd> 切換到 工作/短休/長休。\n        </footer>\n      </section>\n    </div>\n  </div>\n\n  <script>\n    ;(() => {\n      const $ = (sel) => document.querySelector(sel);\n      const $$ = (sel) => Array.from(document.querySelectorAll(sel));\n\n      const elTime = $('#time');\n      const elModePill = $('#modePill');\n      const elStart = $('#btnStart');\n      const elPause = $('#btnPause');\n      const elReset = $('#btnReset');\n      const elSkip = $('#btnSkip');\n      const elFg = document.querySelector('.dial .fg');\n      const elToday = $('#statToday');\n      const elTotal = $('#statTotal');\n      const modeTabs = $$('.modes [data-mode]');\n\n      const form = $('#settingsForm');\n      const inputWork = $('#workM');\n      const inputShort = $('#shortM');\n      const inputLong = $('#longM');\n      const inputLongEvery = $('#longEvery');\n      const inputAuto = $('#autoStart');\n\n      const CIRC = 2 * Math.PI * 100; // r=100 => 628.3\n      elFg.setAttribute('stroke-dasharray', String(CIRC));\n\n      const LS_SETTINGS = 'pomodoro:settings:v1';\n      const LS_STATE = 'pomodoro:state:v1';\n\n      let audioCtx = null;\n      let interval = null;\n      let endAt = null; // timestamp ms\n\n      const defaultSettings = { work: 25*60, short: 5*60, long: 15*60, longEvery: 4, autoStart: true };\n      const settings = { ...defaultSettings, ...loadSettings() };\n\n      const todayStr = () => new Date().toISOString().slice(0,10);\n      const initState = () => ({ mode: 'work', remaining: settings.work, running: false, pomodoros: 0, total: 0, today: { date: todayStr(), count: 0 } });\n      let state = { ...initState(), ...loadState() };\n\n      // 日期跨天處理\n      if (!state.today || state.today.date !== todayStr()) {\n        state.today = { date: todayStr(), count: 0 };\n      }\n\n      // 將設定填回表單\n      inputWork.value = Math.round(settings.work/60);\n      inputShort.value = Math.round(settings.short/60);\n      inputLong.value = Math.round(settings.long/60);\n      inputLongEvery.value = settings.longEvery;\n      inputAuto.checked = !!settings.autoStart;\n\n      // 初始化 UI\n      setMode(state.mode, true);\n      updateUI();\n\n      function saveSettings() { localStorage.setItem(LS_SETTINGS, JSON.stringify(settings)); }\n      function loadSettings() {\n        try { return JSON.parse(localStorage.getItem(LS_SETTINGS)) || {}; } catch { return {}; }\n      }\n      function saveState() { localStorage.setItem(LS_STATE, JSON.stringify(state)); }\n      function loadState() { try { return JSON.parse(localStorage.getItem(LS_STATE)) || {}; } catch { return {}; } }\n\n      function fmt(sec) {\n        sec = Math.max(0, Math.round(sec));\n        const m = Math.floor(sec / 60); const s = sec % 60;\n        return String(m).padStart(2,'0') + ':' + String(s).padStart(2,'0');\n      }\n\n      function setProgress(remain, total) {\n        const p = 1 - (remain / total);\n        const off = CIRC * p;\n        elFg.style.strokeDashoffset = String(off);\n      }\n\n      function themeByMode(mode) {\n        document.body.classList.remove('work','break','long');\n        document.body.classList.add(mode === 'break' ? 'break' : mode);\n      }\n\n      function labelByMode(mode) {\n        return mode === 'work' ? '工作中' : (mode === 'break' ? '短休息' : '長休息');\n      }\n\n      function modeDuration(mode) {\n        return mode === 'work' ? settings.work : (mode === 'break' ? settings.short : settings.long);\n      }\n\n      function setMode(mode, keepRemain=false) {\n        state.mode = mode;\n        themeByMode(mode);\n        elModePill.textContent = labelByMode(mode);\n        modeTabs.forEach(b => b.classList.toggle('active', b.dataset.mode === mode));\n        if (!keepRemain) state.remaining = modeDuration(mode);\n        document.title = `${fmt(state.remaining)}｜番茄鐘`;\n        setProgress(state.remaining, modeDuration(mode));\n        saveState();\n      }\n\n      function startTimer() {\n        if (state.running) return;\n        state.running = true;\n        endAt = Date.now() + state.remaining * 1000;\n        clearInterval(interval);\n        interval = setInterval(tick, 250);\n        updateButtons();\n        // 通知權限\n        if ('Notification' in window && Notification.permission === 'default') {\n          Notification.requestPermission().catch(() => {});\n        }\n        // 啟用音訊\n        if (!audioCtx && 'AudioContext' in window) {\n          try { audioCtx = new AudioContext(); } catch {}\n        }\n        saveState();\n      }\n\n      function pauseTimer() {\n        if (!state.running) return;\n        state.running = false;\n        clearInterval(interval);\n        interval = null;\n        // 重新計算剩餘\n        state.remaining = Math.max(0, Math.round((endAt - Date.now())/1000));\n        endAt = null;\n        updateButtons();\n        saveState();\n      }\n\n      function resetTimer() {\n        pauseTimer();\n        state.remaining = modeDuration(state.mode);\n        setProgress(state.remaining, modeDuration(state.mode));\n        updateUI();\n        saveState();\n      }\n\n      function nextSegment(auto=false) {\n        // 結束當前段落後的切換邏輯\n        if (state.mode === 'work') {\n          state.pomodoros += 1;\n          state.total = (state.total || 0) + 1;\n          state.today.count = (state.today?.count || 0) + 1;\n          const needLong = state.pomodoros % settings.longEvery === 0;\n          setMode(needLong ? 'long' : 'break');\n        } else {\n          setMode('work');\n        }\n        if (auto) {\n          if (settings.autoStart || state.mode === 'work') startTimer();\n        } else {\n          updateButtons();\n        }\n        updateUI();\n        notify();\n        beep();\n        saveState();\n      }\n\n      function tick() {\n        const remain = Math.max(0, Math.round((endAt - Date.now())/1000));\n        if (remain !== state.remaining) {\n          state.remaining = remain;\n          updateUI();\n        }\n        if (remain <= 0) {\n          pauseTimer();\n          nextSegment(true);\n        }\n      }\n\n      function updateButtons() {\n        elStart.disabled = state.running;\n        elPause.disabled = !state.running;\n      }\n\n      function updateUI() {\n        elTime.textContent = fmt(state.remaining);\n        document.title = `${fmt(state.remaining)}｜番茄鐘`;\n        setProgress(state.remaining, modeDuration(state.mode));\n        elToday.textContent = state.today?.count ?? 0;\n        elTotal.textContent = state.total ?? 0;\n      }\n\n      function notify() {\n        const text = state.mode === 'work' ? '開始工作！加油 💪' : (state.mode === 'break' ? '休息一下 ☕' : '長休息時間到 🧘');\n        if ('Notification' in window && Notification.permission === 'granted') {\n          try { new Notification('番茄鐘', { body: text }); } catch {}\n        }\n      }\n\n      function beep() {\n        if (!audioCtx) return;\n        try {\n          const now = audioCtx.currentTime;\n          const seq = [880, 1180, 1480];\n          seq.forEach((freq, i) => {\n            const o = audioCtx.createOscillator();\n            const g = audioCtx.createGain();\n            o.connect(g); g.connect(audioCtx.destination);\n            o.frequency.value = freq; o.type = 'sine';\n            const t0 = now + i * 0.12;\n            g.gain.setValueAtTime(0, t0);\n            g.gain.linearRampToValueAtTime(0.3, t0 + 0.01);\n            g.gain.exponentialRampToValueAtTime(0.0001, t0 + 0.2);\n            o.start(t0); o.stop(t0 + 0.22);\n          });\n        } catch {}\n      }\n\n      // 綁定事件\n      elStart.addEventListener('click', startTimer);\n      elPause.addEventListener('click', pauseTimer);\n      elReset.addEventListener('click', resetTimer);\n      elSkip.addEventListener('click', () => { pauseTimer(); nextSegment(false); });\n\n      modeTabs.forEach(btn => btn.addEventListener('click', () => {\n        pauseTimer();\n        setMode(btn.dataset.mode);\n        updateUI();\n      }));\n\n      form.addEventListener('submit', (e) => {\n        e.preventDefault();\n        settings.work = Math.max(1, +inputWork.value|0) * 60;\n        settings.short = Math.max(1, +inputShort.value|0) * 60;\n        settings.long = Math.max(1, +inputLong.value|0) * 60;\n        settings.longEvery = Math.max(1, +inputLongEvery.value|0);\n        settings.autoStart = !!inputAuto.checked;\n        saveSettings();\n        // 依當前模式重設剩餘\n        state.remaining = modeDuration(state.mode);\n        updateUI();\n      });\n\n      $('#btnResetStats').addEventListener('click', () => {\n        if (confirm('確定要清除統計嗎？這將重置「累計完成」與「今日完成」。')) {\n          state.pomodoros = 0; state.total = 0; state.today = { date: todayStr(), count: 0 };\n          saveState(); updateUI();\n        }\n      });\n\n      // 鍵盤快捷鍵\n      window.addEventListener('keydown', (ev) => {\n        const tag = (ev.target && ev.target.tagName) || '';\n        if (['INPUT','TEXTAREA','SELECT'].includes(tag)) return; // 避免輸入衝突\n        if (ev.code === 'Space') { ev.preventDefault(); state.running ? pauseTimer() : startTimer(); }\n        else if (ev.key === 'r' || ev.key === 'R') { resetTimer(); }\n        else if (ev.key === 'n' || ev.key === 'N') { pauseTimer(); nextSegment(false); }\n        else if (ev.key === '1') { pauseTimer(); setMode('work'); updateUI(); }\n        else if (ev.key === '2') { pauseTimer(); setMode('break'); updateUI(); }\n        else if (ev.key === '3') { pauseTimer(); setMode('long'); updateUI(); }\n      });\n\n      // 可見度變更：避免背景時不準確\n      document.addEventListener('visibilitychange', () => {\n        if (state.running && endAt) {\n          // 立刻更新一次剩餘\n          state.remaining = Math.max(0, Math.round((endAt - Date.now())/1000));\n          updateUI();\n        }\n      });\n\n      // 首次載入同步 UI\n      updateButtons();\n    })();\n  </script>\n</body>\n</html>\n",
  "createdAt": "2025-08-27T07:51:07.080Z"
}