{
  "projectName": "todo-list",
  "authorName": "冰川（陳威達）",
  "htmlContent": "<!DOCTYPE html>\n<html lang=\"zh-Hant\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <title>To‑Do List</title>\n  <style>\n    :root{\n      --bg: #0f172a;          /* slate-900 */\n      --card: #111827;        /* gray-900 */\n      --text: #e5e7eb;        /* gray-200 */\n      --muted:#9ca3af;        /* gray-400 */\n      --primary:#22d3ee;      /* cyan-400 */\n      --primary-2:#67e8f9;    /* cyan-300 */\n      --accent:#a78bfa;       /* violet-400 */\n      --danger:#f87171;       /* red-400 */\n      --ok:#34d399;           /* emerald-400 */\n      --shadow: 0 10px 30px rgba(0,0,0,.25);\n    }\n    @media (prefers-color-scheme: light){\n      :root{\n        --bg:#f1f5f9;        /* slate-100 */\n        --card:#ffffff;\n        --text:#0f172a;      /* slate-900 */\n        --muted:#475569;     /* slate-600 */\n        --shadow: 0 10px 20px rgba(2,6,23,.08);\n      }\n    }\n    *{box-sizing:border-box}\n    html,body{height:100%}\n    body{\n      margin:0; font-family: ui-sans-serif, system-ui, -apple-system, \"Noto Sans TC\", Segoe UI, Roboto, Helvetica, Arial, \"Apple Color Emoji\", \"Segoe UI Emoji\";\n      color:var(--text);\n      background:\n        radial-gradient(1200px 600px at 10% -10%, rgba(103,232,249,.25), transparent 60%),\n        radial-gradient(900px 500px at 110% 10%, rgba(167,139,250,.25), transparent 60%),\n        linear-gradient(180deg, var(--bg), var(--bg));\n      display:grid; place-items:center;\n      padding:24px;\n    }\n    .card{\n      width:min(820px, 100%);\n      background:var(--card);\n      border-radius:20px;\n      box-shadow:var(--shadow);\n      padding:24px 22px 20px;\n      border:1px solid rgba(255,255,255,.06);\n    }\n    header{display:flex;align-items:center;justify-content:space-between;gap:12px;margin-bottom:16px}\n    .title{font-size:24px;font-weight:800;letter-spacing:.4px}\n    .pill{\n      display:inline-flex;align-items:center;gap:8px;\n      background:linear-gradient(90deg, rgba(34,211,238,.15), rgba(167,139,250,.15));\n      border:1px solid rgba(255,255,255,.08);\n      border-radius:999px;padding:6px 12px;font-size:12px;color:var(--muted)\n    }\n    /* input row */\n    .new-row{display:flex;gap:10px;margin:10px 0 18px}\n    .input{flex:1;border-radius:12px;border:1px solid rgba(255,255,255,.08);padding:12px 14px;font-size:16px;color:var(--text);background:rgba(255,255,255,.04);outline:none}\n    .input::placeholder{color:var(--muted)}\n    .btn{border:0;border-radius:12px;padding:12px 14px;font-size:14px;font-weight:700;cursor:pointer;transition:.15s transform ease, .2s filter ease; display:inline-flex; align-items:center; gap:8px}\n    .btn:active{transform:scale(.98)}\n    .btn-primary{background:linear-gradient(90deg, var(--primary), var(--primary-2)); color:#0c4a6e}\n    .btn-ghost{background:transparent;color:var(--muted)}\n\n    /* filters */\n    .toolbar{display:flex;align-items:center;justify-content:space-between;gap:10px;margin:8px 2px 16px}\n    .filters{display:flex;gap:6px;flex-wrap:wrap}\n    .filter{padding:8px 10px;border-radius:10px;border:1px solid rgba(255,255,255,.1);background:transparent;color:var(--muted);cursor:pointer}\n    .filter[aria-pressed=\"true\"]{background:rgba(34,211,238,.12);color:var(--text);border-color:rgba(34,211,238,.35)}\n    .count{font-size:13px;color:var(--muted)}\n\n    /* list */\n    ul.list{list-style:none;margin:0;padding:0;display:flex;flex-direction:column;gap:10px}\n    .item{display:grid;grid-template-columns:auto 1fr auto;align-items:center;gap:12px;padding:10px 12px;border:1px solid rgba(255,255,255,.08);background:rgba(255,255,255,.03);border-radius:14px}\n    .item[draggable=\"true\"]{cursor:grab}\n    .item.dragging{opacity:.6}\n    .checkbox{appearance:none;width:20px;height:20px;border-radius:6px;border:2px solid var(--muted);display:grid;place-items:center;cursor:pointer;transition:.15s}\n    .checkbox:checked{background:var(--ok);border-color:var(--ok)}\n    .checkbox:checked::after{content:\"✓\";font-weight:900;color:#052e1a;font-size:14px}\n    .label{user-select:none}\n    .text{font-size:16px;line-height:1.4}\n    .done .text{color:var(--muted); text-decoration: line-through;}\n\n    .actions{display:flex;gap:4px}\n    .icon-btn{background:transparent;border:0;border-radius:10px;padding:8px;cursor:pointer;color:var(--muted)}\n    .icon-btn:hover{color:var(--text);background:rgba(255,255,255,.06)}\n\n    .edit-input{width:100%;border:1px dashed rgba(255,255,255,.25);background:rgba(255,255,255,.04);color:var(--text);border-radius:10px;padding:8px 10px;font-size:16px}\n\n    footer{display:flex;justify-content:space-between;align-items:center;margin-top:16px;color:var(--muted);font-size:12px}\n    .link{color:var(--primary)}\n    .clear{color:var(--danger)}\n\n    @media (max-width:520px){\n      header{flex-direction:column;align-items:flex-start}\n      .toolbar{flex-direction:column;align-items:flex-start}\n    }\n  </style>\n</head>\n<body>\n  <div class=\"card\" role=\"application\" aria-label=\"To-Do List\">\n    <header>\n      <div class=\"title\">📋 To‑Do List</div>\n      <div class=\"pill\" id=\"statusPill\">0 個未完成</div>\n    </header>\n\n    <div class=\"new-row\" aria-label=\"新增待辦\">\n      <input id=\"newInput\" class=\"input\" type=\"text\" placeholder=\"輸入待辦事項，按 Enter 新增…\" autocomplete=\"off\" aria-label=\"待辦內容\" />\n      <button id=\"addBtn\" class=\"btn btn-primary\" aria-label=\"新增\">\n        <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\"><path d=\"M12 5v14M5 12h14\"/></svg>\n        新增\n      </button>\n    </div>\n\n    <div class=\"toolbar\">\n      <div class=\"filters\" role=\"toolbar\" aria-label=\"篩選\">\n        <button class=\"filter\" data-filter=\"all\" aria-pressed=\"true\">全部</button>\n        <button class=\"filter\" data-filter=\"active\" aria-pressed=\"false\">未完成</button>\n        <button class=\"filter\" data-filter=\"completed\" aria-pressed=\"false\">已完成</button>\n      </div>\n      <div class=\"count\">\n        <span id=\"countText\">0 個項目</span>\n      </div>\n    </div>\n\n    <ul id=\"list\" class=\"list\" role=\"list\"></ul>\n\n    <footer>\n      <button id=\"clearCompleted\" class=\"btn btn-ghost clear\">清除已完成</button>\n      <div>拖曳可排序 · 本地儲存不會丟失</div>\n    </footer>\n  </div>\n\n  <script>\n    (function(){\n      'use strict';\n      /** @type {HTMLInputElement} */\n      const newInput = document.getElementById('newInput');\n      const addBtn = document.getElementById('addBtn');\n      const listEl = document.getElementById('list');\n      const countText = document.getElementById('countText');\n      const statusPill = document.getElementById('statusPill');\n      const clearCompletedBtn = document.getElementById('clearCompleted');\n      const filterBtns = Array.from(document.querySelectorAll('.filter'));\n\n      const STORAGE_KEY = 'todo-list-v1';\n      /** @typedef {{id:string,text:string,done:boolean,createdAt:number}} Task */\n      /** @type {Task[]} */\n      let tasks = load();\n      let filter = 'all'; // all | active | completed\n\n      function save(){\n        localStorage.setItem(STORAGE_KEY, JSON.stringify(tasks));\n      }\n      function load(){\n        try{ return JSON.parse(localStorage.getItem(STORAGE_KEY) || '[]'); }\n        catch{ return []; }\n      }\n      function uid(){ return Math.random().toString(36).slice(2,9) + Date.now().toString(36); }\n\n      function addTask(text){\n        text = text.trim();\n        if(!text) return;\n        tasks.unshift({ id: uid(), text, done:false, createdAt: Date.now() });\n        save();\n        newInput.value = '';\n        render();\n      }\n      function toggleTask(id){\n        const t = tasks.find(t=>t.id===id); if(!t) return; t.done = !t.done; save(); render();\n      }\n      function deleteTask(id){\n        tasks = tasks.filter(t=>t.id!==id); save(); render();\n      }\n      function editTask(id, newText){\n        const t = tasks.find(t=>t.id===id); if(!t) return; t.text = newText.trim() || t.text; save(); render();\n      }\n      function clearCompleted(){ tasks = tasks.filter(t=>!t.done); save(); render(); }\n\n      function setFilter(name){\n        filter = name;\n        for(const btn of filterBtns){ btn.setAttribute('aria-pressed', String(btn.dataset.filter===name)); }\n        render();\n      }\n\n      function getFiltered(){\n        if(filter==='active') return tasks.filter(t=>!t.done);\n        if(filter==='completed') return tasks.filter(t=>t.done);\n        return tasks;\n      }\n\n      function render(){\n        const items = getFiltered();\n        listEl.innerHTML = '';\n        for(const t of items){ listEl.appendChild(renderItem(t)); }\n        const remaining = tasks.filter(t=>!t.done).length;\n        countText.textContent = `${tasks.length} 個項目`;\n        statusPill.textContent = `${remaining} 個未完成`;\n        document.title = remaining ? `(${remaining}) To‑Do List` : 'To‑Do List';\n      }\n\n      function renderItem(task){\n        const li = document.createElement('li');\n        li.className = 'item' + (task.done ? ' done' : '');\n        li.setAttribute('role','listitem');\n        li.draggable = true;\n        li.dataset.id = task.id;\n\n        // checkbox\n        const cb = document.createElement('input');\n        cb.type = 'checkbox';\n        cb.className = 'checkbox';\n        cb.checked = task.done;\n        cb.ariaLabel = '切換完成狀態';\n        cb.addEventListener('change', ()=> toggleTask(task.id));\n\n        const labelWrap = document.createElement('div');\n        labelWrap.className = 'label';\n\n        const text = document.createElement('div');\n        text.className = 'text';\n        text.textContent = task.text;\n        labelWrap.appendChild(text);\n\n        // actions\n        const actions = document.createElement('div');\n        actions.className = 'actions';\n\n        const editBtn = iconButton(editIcon(), '編輯');\n        editBtn.addEventListener('click', ()=> startEdit(li, task));\n\n        const delBtn = iconButton(trashIcon(), '刪除');\n        delBtn.addEventListener('click', ()=> deleteTask(task.id));\n\n        actions.append(editBtn, delBtn);\n\n        li.append(cb, labelWrap, actions);\n\n        // drag events\n        li.addEventListener('dragstart', ev=>{\n          li.classList.add('dragging');\n          ev.dataTransfer.setData('text/plain', task.id);\n        });\n        li.addEventListener('dragend', ()=> li.classList.remove('dragging'));\n        li.addEventListener('dragover', ev=>{\n          ev.preventDefault();\n          const draggingId = ev.dataTransfer.getData('text/plain');\n          if(!draggingId || draggingId===task.id) return;\n          const draggingEl = [...listEl.children].find(el=>el.dataset.id===draggingId);\n          const rect = li.getBoundingClientRect();\n          const before = (ev.clientY - rect.top) < rect.height/2;\n          if(before) listEl.insertBefore(draggingEl, li); else listEl.insertBefore(draggingEl, li.nextSibling);\n        });\n        li.addEventListener('drop', ()=>{ syncOrderFromDOM(); save(); render(); });\n\n        return li;\n      }\n\n      function startEdit(li, task){\n        const label = li.querySelector('.label');\n        const actions = li.querySelector('.actions');\n        label.innerHTML = '';\n        const input = document.createElement('input');\n        input.className = 'edit-input';\n        input.type = 'text';\n        input.value = task.text;\n        label.appendChild(input);\n        input.focus();\n        input.setSelectionRange(task.text.length, task.text.length);\n\n        const confirmBtn = iconButton(checkIcon(), '儲存');\n        const cancelBtn = iconButton(closeIcon(), '取消');\n        actions.innerHTML = '';\n        actions.append(confirmBtn, cancelBtn);\n\n        const finish = (ok)=>{\n          if(ok){ editTask(task.id, input.value); }\n          else { render(); }\n        };\n        confirmBtn.addEventListener('click', ()=> finish(true));\n        cancelBtn.addEventListener('click', ()=> finish(false));\n        input.addEventListener('keydown', (e)=>{\n          if(e.key==='Enter') finish(true);\n          if(e.key==='Escape') finish(false);\n        });\n      }\n\n      function iconButton(svg, label){\n        const btn = document.createElement('button');\n        btn.className = 'icon-btn';\n        btn.ariaLabel = label;\n        btn.innerHTML = svg;\n        return btn;\n      }\n\n      function syncOrderFromDOM(){\n        const ids = [...listEl.children].map(el=>el.dataset.id);\n        // reorder tasks to match ids order while preserving others (from other filters)\n        const map = new Map(tasks.map(t=>[t.id, t]));\n        const re = [];\n        for(const id of ids){ if(map.has(id)) re.push(map.get(id)); }\n        // append any not in filtered DOM (when filter != all)\n        for(const t of tasks){ if(!ids.includes(t.id)) re.push(t); }\n        tasks = re;\n      }\n\n      function editIcon(){ return `<svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\"><path d=\"M12 20h9\"/><path d=\"M16.5 3.5a2.1 2.1 0 0 1 3 3L7 19l-4 1 1-4 12.5-12.5z\"/></svg>`}\n      function trashIcon(){ return `<svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\"><polyline points=\"3 6 5 6 21 6\"/><path d=\"M19 6l-1 14a2 2 0 0 1-2 2H8a2 2 0 0 1-2-2L5 6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2\"/><line x1=\"10\" y1=\"11\" x2=\"10\" y2=\"17\"/><line x1=\"14\" y1=\"11\" x2=\"14\" y2=\"17\"/></svg>`}\n      function checkIcon(){ return `<svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\"><path d=\"M20 6L9 17l-5-5\"/></svg>`}\n      function closeIcon(){ return `<svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\"><line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"/><line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"/></svg>`}\n\n      // events\n      addBtn.addEventListener('click', ()=> addTask(newInput.value));\n      newInput.addEventListener('keydown', (e)=>{ if(e.key==='Enter') addTask(newInput.value); });\n      clearCompletedBtn.addEventListener('click', clearCompleted);\n      for(const btn of filterBtns){ btn.addEventListener('click', ()=> setFilter(btn.dataset.filter)); }\n\n      // initial\n      render();\n    })();\n  </script>\n</body>\n</html>\n",
  "createdAt": "2025-08-27T09:42:48.997Z"
}