{
  "projectName": "justintyy-test1",
  "authorName": "Anonymous",
  "htmlContent": "<!DOCTYPE html>\n<html lang=\"zh-Hant\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <title>25:00 ‚Ä¢ Áï™ËåÑÈêò</title>\n  <style>\n    /* ---- CSS Variables & Reset ---- */\n    :root {\n      --bg-start: #0f1226; /* deep indigo */\n      --bg-end: #0a0d18;   /* near-black */\n      --text: #e6e6f0;\n      --muted: #a7a9b8;\n      --panel: #161a2e;\n      --outline: rgba(255,255,255,0.08);\n      --work: #ff8a3d;  /* warm orange */\n      --break: #3db8ff; /* cool blue */\n      --shadow: 0 10px 30px rgba(0,0,0,0.35);\n      --radius: 18px;\n      --ring-track: rgba(255,255,255,0.08);\n    }\n\n    * { box-sizing: border-box; }\n    html, body { height: 100%; }\n    body {\n      margin: 0;\n      font-family: ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Noto Sans TC\", \"Helvetica Neue\", Arial, \"Apple Color Emoji\", \"Segoe UI Emoji\";\n      color: var(--text);\n      background: radial-gradient(1200px 800px at 70% -10%, #1a2142 0%, transparent 60%),\n                  radial-gradient(900px 700px at -10% 110%, #121a36 0%, transparent 60%),\n                  linear-gradient(160deg, var(--bg-start), var(--bg-end));\n      display: grid;\n      place-items: center;\n      padding: 20px;\n    }\n\n    /* ---- App Shell ---- */\n    .app {\n      width: min(640px, 100%);\n      background: linear-gradient(180deg, rgba(255,255,255,0.03), rgba(255,255,255,0.01));\n      border: 1px solid var(--outline);\n      border-radius: var(--radius);\n      box-shadow: var(--shadow);\n      backdrop-filter: blur(8px);\n      -webkit-backdrop-filter: blur(8px);\n      padding: 18px 18px 22px;\n    }\n\n    .header {\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      gap: 12px;\n      margin-bottom: 12px;\n    }\n\n    .brand {\n      display: flex;\n      align-items: center;\n      gap: 10px;\n    }\n\n    .logo {\n      width: 28px; height: 28px;\n      border-radius: 999px;\n      background: conic-gradient(from 0deg, var(--work), var(--break));\n      box-shadow: 0 0 0 2px var(--outline) inset, 0 6px 18px rgba(0,0,0,0.3);\n    }\n\n    .title { font-weight: 700; letter-spacing: .3px; }\n    .subtitle { color: var(--muted); font-size: 12px; }\n\n    .mode-toggle {\n      display: inline-flex;\n      background: #0f1326;\n      border: 1px solid var(--outline);\n      border-radius: 12px;\n      overflow: hidden;\n    }\n\n    .seg {\n      padding: 8px 12px;\n      font-size: 13px;\n      color: var(--muted);\n      cursor: pointer;\n      border: none;\n      background: transparent;\n      transition: background .2s ease, color .2s ease;\n    }\n    .seg.active {\n      color: var(--text);\n      background: rgba(255,255,255,0.06);\n    }\n\n    /* ---- Timer Card ---- */\n    .card {\n      position: relative;\n      border-radius: var(--radius);\n      border: 1px solid var(--outline);\n      padding: 22px;\n      background: linear-gradient(180deg, rgba(255,255,255,.03), rgba(255,255,255,.01));\n      box-shadow: var(--shadow);\n    }\n\n    .ring-wrap {\n      width: min(80vw, 360px);\n      height: min(80vw, 360px);\n      margin: 12px auto 18px;\n      position: relative;\n      display: grid;\n      place-items: center;\n    }\n    svg { display: block; width: 100%; height: 100%; }\n\n    .timer-text {\n      position: absolute;\n      display: grid; place-items: center;\n      text-align: center;\n    }\n    .time {\n      font-size: clamp(42px, 10vw, 64px);\n      font-weight: 800;\n      letter-spacing: 1px;\n    }\n    .mode-label { color: var(--muted); margin-top: 6px; font-size: 13px; }\n\n    /* ---- Controls ---- */\n    .controls {\n      display: grid;\n      grid-template-columns: repeat(4, minmax(0,1fr));\n      gap: 10px;\n      margin-top: 12px;\n    }\n\n    .btn {\n      padding: 12px 14px;\n      border-radius: 12px;\n      border: 1px solid var(--outline);\n      background: #0e1226;\n      color: var(--text);\n      font-weight: 600;\n      font-size: 14px;\n      cursor: pointer;\n      transition: transform .12s ease, box-shadow .12s ease, background .2s ease;\n      box-shadow: 0 2px 0 rgba(255,255,255,0.06) inset;\n    }\n    .btn:hover { transform: translateY(-1px); }\n    .btn:active { transform: translateY(0); }\n\n    .btn.primary {\n      background: linear-gradient(135deg, rgba(255,255,255,0.06), rgba(255,255,255,0.02));\n      border: 1px solid color-mix(in oklab, var(--outline), white 2%);\n    }\n\n    .badge {\n      display: inline-flex; align-items: center; gap: 8px;\n      padding: 8px 12px; border-radius: 999px;\n      background: rgba(255,255,255,0.06);\n      border: 1px solid var(--outline);\n      font-size: 13px; color: var(--muted);\n    }\n    .badge strong { color: var(--text); }\n\n    .footer {\n      display: flex; align-items: center; justify-content: space-between;\n      margin-top: 14px; flex-wrap: wrap; gap: 10px;\n    }\n\n    /* ---- Dialog ---- */\n    dialog {\n      width: min(560px, 92vw);\n      border: 1px solid var(--outline);\n      border-radius: 16px;\n      padding: 0;\n      background: linear-gradient(180deg, rgba(255,255,255,.06), rgba(255,255,255,.02));\n      color: var(--text);\n      box-shadow: var(--shadow);\n    }\n    dialog::backdrop { background: rgba(0,0,0,0.55); backdrop-filter: blur(2px); }\n    .d-head { padding: 16px 18px; border-bottom: 1px solid var(--outline); font-weight: 700; }\n    .d-body { padding: 16px 18px; display: grid; gap: 14px; }\n    .row { display: grid; grid-template-columns: 1fr auto; gap: 12px; align-items: center; }\n    label { color: var(--muted); font-size: 14px; }\n    input[type=\"number\"] {\n      width: 110px; padding: 10px 12px; border-radius: 12px;\n      border: 1px solid var(--outline); background: #0d1124; color: var(--text);\n    }\n    .d-foot { padding: 14px 18px; border-top: 1px solid var(--outline); display: flex; justify-content: flex-end; gap: 10px; }\n\n    /* ---- Responsive ---- */\n    @media (min-width: 680px) {\n      .controls { grid-template-columns: repeat(4, max-content); justify-content: center; }\n      .btn { padding: 12px 18px; }\n    }\n  </style>\n</head>\n<body>\n  <main class=\"app\" id=\"app\">\n    <header class=\"header\">\n      <div class=\"brand\">\n        <div class=\"logo\" aria-hidden=\"true\"></div>\n        <div>\n          <div class=\"title\">Áï™ËåÑÈêò</div>\n          <div class=\"subtitle\">Mobile‚Äëfirst ‚Ä¢ Ê∑±Ëâ≤Ê®°Âºè</div>\n        </div>\n      </div>\n      <div class=\"mode-toggle\" role=\"tablist\" aria-label=\"Â∑•‰Ωú/‰ºëÊÅØÊ®°ÂºèÂàáÊèõ\">\n        <button class=\"seg active\" id=\"workTab\" role=\"tab\" aria-selected=\"true\">Â∑•‰Ωú</button>\n        <button class=\"seg\" id=\"breakTab\" role=\"tab\" aria-selected=\"false\">‰ºëÊÅØ</button>\n      </div>\n    </header>\n\n    <section class=\"card\" aria-label=\"Ë®àÊôÇÂô®\">\n      <div class=\"ring-wrap\">\n        <svg viewBox=\"0 0 120 120\" aria-hidden=\"true\">\n          <!-- track -->\n          <circle cx=\"60\" cy=\"60\" r=\"54\" stroke=\"var(--ring-track)\" stroke-width=\"8\" fill=\"none\" />\n          <!-- progress ring -->\n          <circle id=\"ring\" cx=\"60\" cy=\"60\" r=\"54\" stroke=\"var(--work)\" stroke-linecap=\"round\" stroke-width=\"8\" fill=\"none\"\n                  style=\"transform: rotate(-90deg); transform-origin: 50% 50%; stroke-dasharray: 339.292; stroke-dashoffset: 0;\" />\n        </svg>\n        <div class=\"timer-text\">\n          <div class=\"time\" id=\"time\">25:00</div>\n          <div class=\"mode-label\" id=\"modeLabel\">Â∑•‰Ωú‰∏≠</div>\n        </div>\n      </div>\n\n      <div class=\"controls\">\n        <button class=\"btn primary\" id=\"startPauseBtn\" aria-pressed=\"false\">ÈñãÂßã</button>\n        <button class=\"btn\" id=\"resetBtn\">ÈáçÁΩÆ</button>\n        <button class=\"btn\" id=\"toggleBtn\">ÂàáÊèõÊ®°Âºè</button>\n        <button class=\"btn\" id=\"settingsBtn\">Ë®≠ÂÆö</button>\n      </div>\n\n      <div class=\"footer\">\n        <div class=\"badge\" title=\"ÂÆåÊàêÁöÑÁï™ËåÑÊï∏\">\n          üçÖ Â∑≤ÂÆåÊàêÔºö<strong id=\"pomodoroCount\">0</strong>\n        </div>\n        <div class=\"badge\" id=\"statusBadge\">Â∞±Á∑í</div>\n      </div>\n    </section>\n  </main>\n\n  <!-- Settings Dialog -->\n  <dialog id=\"settingsDialog\" aria-labelledby=\"settingsTitle\">\n    <div class=\"d-head\" id=\"settingsTitle\">Ë®≠ÂÆö</div>\n    <form method=\"dialog\">\n      <div class=\"d-body\">\n        <div class=\"row\">\n          <label for=\"workInput\">Â∑•‰ΩúÊôÇÈñìÔºàÂàÜÈêòÔºâ</label>\n          <input id=\"workInput\" type=\"number\" min=\"1\" max=\"180\" step=\"1\" />\n        </div>\n        <div class=\"row\">\n          <label for=\"breakInput\">‰ºëÊÅØÊôÇÈñìÔºàÂàÜÈêòÔºâ</label>\n          <input id=\"breakInput\" type=\"number\" min=\"1\" max=\"60\" step=\"1\" />\n        </div>\n      </div>\n      <div class=\"d-foot\">\n        <button class=\"btn\" value=\"cancel\">ÂèñÊ∂à</button>\n        <button class=\"btn primary\" id=\"saveSettingsBtn\" value=\"default\">ÂÑ≤Â≠ò</button>\n      </div>\n    </form>\n  </dialog>\n\n  <script>\n    // ---- State ----\n    const ring = document.getElementById('ring');\n    const timeEl = document.getElementById('time');\n    const modeLabel = document.getElementById('modeLabel');\n    const startPauseBtn = document.getElementById('startPauseBtn');\n    const resetBtn = document.getElementById('resetBtn');\n    const toggleBtn = document.getElementById('toggleBtn');\n    const settingsBtn = document.getElementById('settingsBtn');\n    const workTab = document.getElementById('workTab');\n    const breakTab = document.getElementById('breakTab');\n    const statusBadge = document.getElementById('statusBadge');\n    const pomodoroCountEl = document.getElementById('pomodoroCount');\n\n    const dialogEl = document.getElementById('settingsDialog');\n    const workInput = document.getElementById('workInput');\n    const breakInput = document.getElementById('breakInput');\n\n    const CIRC = 2 * Math.PI * 54; // 339.292\n    ring.style.strokeDasharray = CIRC.toFixed(3);\n\n    const storage = {\n      load() {\n        try { return JSON.parse(localStorage.getItem('pomo:v1')) || {}; } catch { return {}; }\n      },\n      save(data) { localStorage.setItem('pomo:v1', JSON.stringify(data)); }\n    };\n\n    let persisted = storage.load();\n\n    let workMinutes = Number.isFinite(persisted.workMinutes) ? persisted.workMinutes : 25;\n    let breakMinutes = Number.isFinite(persisted.breakMinutes) ? persisted.breakMinutes : 5;\n    let mode = (persisted.mode === 'break') ? 'break' : 'work';\n    let remaining = ((persisted.remainingSec ?? (mode === 'work' ? workMinutes*60 : breakMinutes*60)));\n    let running = false;\n    let timer = null;\n    let pomodoros = Number.isFinite(persisted.pomodoros) ? persisted.pomodoros : 0;\n\n    // ---- Helpers ----\n    function fmt(sec) {\n      const m = Math.floor(sec / 60).toString().padStart(2, '0');\n      const s = Math.floor(sec % 60).toString().padStart(2, '0');\n      return `${m}:${s}`;\n    }\n\n    function applyTheme() {\n      const root = document.documentElement;\n      const isWork = mode === 'work';\n      ring.setAttribute('stroke', getComputedStyle(root).getPropertyValue(isWork ? '--work' : '--break'));\n      document.body.style.backgroundImage = `radial-gradient(1200px 800px at 70% -10%, ${isWork ? '#2b1a12' : '#112436'} 0%, transparent 60%),\n                  radial-gradient(900px 700px at -10% 110%, ${isWork ? '#24161a' : '#101a2d'} 0%, transparent 60%),\n                  linear-gradient(160deg, var(--bg-start), var(--bg-end))`;\n      modeLabel.textContent = isWork ? 'Â∑•‰Ωú‰∏≠' : '‰ºëÊÅØ‰∏≠';\n      workTab.classList.toggle('active', isWork);\n      breakTab.classList.toggle('active', !isWork);\n    }\n\n    function setTitle() {\n      document.title = `${fmt(remaining)} ‚Ä¢ Áï™ËåÑÈêò`;\n    }\n\n    function updateUI() {\n      timeEl.textContent = fmt(remaining);\n      setTitle();\n      const total = (mode === 'work' ? workMinutes * 60 : breakMinutes * 60);\n      const progress = Math.max(0, Math.min(1, 1 - remaining / total));\n      ring.style.strokeDashoffset = (progress * CIRC).toFixed(3);\n      pomodoroCountEl.textContent = pomodoros;\n    }\n\n    function persist() {\n      storage.save({ workMinutes, breakMinutes, mode, remainingSec: remaining, pomodoros });\n    }\n\n    function start() {\n      if (running) return;\n      running = true;\n      startPauseBtn.textContent = 'Êö´ÂÅú';\n      startPauseBtn.setAttribute('aria-pressed', 'true');\n      statusBadge.textContent = 'Ë®àÊôÇ‰∏≠‚Ä¶';\n      timer = setInterval(tick, 1000);\n    }\n\n    function pause() {\n      if (!running) return;\n      running = false;\n      startPauseBtn.textContent = 'ÈñãÂßã';\n      startPauseBtn.setAttribute('aria-pressed', 'false');\n      statusBadge.textContent = 'Â∑≤Êö´ÂÅú';\n      clearInterval(timer); timer = null;\n      persist();\n    }\n\n    function reset() {\n      remaining = (mode === 'work' ? workMinutes * 60 : breakMinutes * 60);\n      updateUI();\n      statusBadge.textContent = 'Â∑≤ÈáçÁΩÆ';\n      persist();\n    }\n\n    function switchMode(nextMode) {\n      mode = nextMode || (mode === 'work' ? 'break' : 'work');\n      applyTheme();\n      remaining = (mode === 'work' ? workMinutes * 60 : breakMinutes * 60);\n      updateUI();\n      statusBadge.textContent = mode === 'work' ? 'ÂàáÊèõËá≥Â∑•‰Ωú' : 'ÂàáÊèõËá≥‰ºëÊÅØ';\n      persist();\n    }\n\n    function completeCycle() {\n      // Auto-switch & count only after a WORK session finishes\n      if (mode === 'work') { pomodoros += 1; }\n      switchMode();\n      // Auto-continue into next session\n      start();\n    }\n\n    function tick() {\n      remaining -= 1;\n      if (remaining <= 0) {\n        remaining = 0; updateUI();\n        pause();\n        statusBadge.textContent = 'ÊôÇÈñìÂà∞ÔºÅ';\n        // Small chime (optional, non-blocking)\n        try { new AudioContext(); } catch {}\n        completeCycle();\n        return;\n      }\n      updateUI();\n    }\n\n    // ---- Event Wiring ----\n    startPauseBtn.addEventListener('click', () => running ? pause() : start());\n    resetBtn.addEventListener('click', () => { pause(); reset(); });\n    toggleBtn.addEventListener('click', () => { pause(); switchMode(); });\n    settingsBtn.addEventListener('click', () => {\n      workInput.value = workMinutes;\n      breakInput.value = breakMinutes;\n      dialogEl.showModal();\n    });\n\n    document.getElementById('saveSettingsBtn').addEventListener('click', () => {\n      const w = Math.max(1, Math.min(180, parseInt(workInput.value || '25', 10)));\n      const b = Math.max(1, Math.min(60, parseInt(breakInput.value || '5', 10)));\n      workMinutes = w; breakMinutes = b;\n      // Reset current mode to apply new durations\n      remaining = (mode === 'work' ? workMinutes * 60 : breakMinutes * 60);\n      updateUI();\n      persist();\n    });\n\n    // Tabs also switch mode\n    workTab.addEventListener('click', () => { pause(); switchMode('work'); });\n    breakTab.addEventListener('click', () => { pause(); switchMode('break'); });\n\n    // Keyboard shortcuts: space=start/pause, r=reset, m=toggle mode, s=settings\n    window.addEventListener('keydown', (e) => {\n      if (['INPUT', 'TEXTAREA'].includes((e.target.tagName))) return;\n      if (e.code === 'Space') { e.preventDefault(); running ? pause() : start(); }\n      if (e.key.toLowerCase() === 'r') { pause(); reset(); }\n      if (e.key.toLowerCase() === 'm') { pause(); switchMode(); }\n      if (e.key.toLowerCase() === 's') { if (!dialogEl.open) { settingsBtn.click(); } }\n    });\n\n    // ---- Init ----\n    applyTheme();\n    updateUI();\n  </script>\n</body>\n</html>",
  "isPublic": true,
  "title": "justintyy-test1",
  "description": "",
  "imageUrl": null,
  "createdAt": "2025-08-29T07:02:50.576Z"
}